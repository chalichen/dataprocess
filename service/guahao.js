var math = require('mathjs');
var fs = require('fs');
var save = require('./export2xlsx')
var soaptest = require('./callWebservice')
class Dept
{
    constructor(code,name)
    {
        this.科室代码 = code;
        this.科室名称 = name;
        this.班次 = 1;
        this.是否内科 = false;
        // this.code = code;
        // this.name = name;
    }

};
// var 科室字典 = {"101":"内科","102":"外科","103":"中医科","10511":"耳鼻喉科门诊","10512":"眼科门诊","106":"口腔科","107":"皮科",
// "108":"血液病中心","110":"心脏中心","140":"特需门诊","204":"神经科","205":"康复科"};
var 科室字典 = {
    101:"内科",

    102:"外科",

    103:"中医科",

    10511:"耳鼻喉科门诊",

    10512:"眼科门诊",

    106:"口腔科",

    107:"皮科",

    108:"血液病中心",

    110:"心脏中心",

    140:"特需门诊",

    204:"神经科",

    205:"康复科"

};
var 排班表 = new Array(
    [101,"内科",1],
    [101,"内科",2],
    [102,"外科",1],
    [102,"外科",2],
    [103,"中医科",1],
    [103,"中医科",2],
    [10511,"耳鼻喉科门诊",1],
    [10511,"耳鼻喉科门诊",2],
    [10512,"眼科门诊",1],
    [10512,"眼科门诊",2],
    [106,"口腔科",1],
    [106,"口腔科",2],
    [107,"皮科",1],
    [107,"皮科",2],
    [108,"血液病中心",1],
    [108,"血液病中心",2],
    [110,"心脏中心",1],
    [110,"心脏中心",2],
    [140,"特需门诊",1],
    [140,"特需门诊",2],
    [204,"神经科",1],
    [204,"神经科",2],
    [205,"康复科",1],
    [205,"康复科",2],
);
class C非当日预约
{
    constructor(科室代码,	科室名称,	班次,	普通号,	专家号,	窗口预约,	电话预约,	网络预约,	其他预约)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.普通号 = 普通号;
        this.专家号  =  专家号;
        this.窗口预约 = 窗口预约;
        this.电话预约 =  电话预约;
        this.网络预约 = 网络预约;
        this.其他预约 = 其他预约;
    }
};
class C号源总数
{
    constructor(科室代码,科室名称,	班次,	挂号总数,	普通挂号总数,	专家挂号总数,	非当日预约总数,	非当日预约普通总数,	非当日预约专家总数,	非当日失约数)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.挂号总数 = 挂号总数;
        this.普通挂号总数  =  普通挂号总数;
        this.专家挂号总数 = 专家挂号总数;
        this.非当日预约总数 =  非当日预约总数;
        this.非当日预约普通总数 = 非当日预约普通总数;
        this.非当日预约专家总数 = 非当日预约专家总数;
        this.非当日失约数 = 非当日失约数;
    }
    // 科室代码	班次	挂号总数	普通挂号总数	专家挂号总数	非当日预约总数	非当日预约普通总数	非当日预约专家总数	非当日失约数

}
class C当日医生加号
{
    constructor(科室代码,科室名称,	班次,	当日医生预约总数,	当日医生预约普通总数,	当日医生预约专家总数)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.当日医生预约总数 = 当日医生预约总数;
        this.当日医生预约普通总数  =  当日医生预约普通总数;
        this.当日医生预约专家总数 = 当日医生预约专家总数;

    }
    // 科室	班次	当日医生预约总数	当日医生预约普通总数	当日医生预约专家总数

};
class C当日预约
{
    constructor(科室代码,科室名称,	班次,	当日自助机普通人次,	当日自助机专家人次	,当日自费APP普通人次,	当日自费APP专家人次,	当日医保APP普通人次,	当日医保APP专家人次,	当日窗口普通人次,	当日窗口专家人次)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.当日自助机普通人次 = 当日自助机普通人次;
        this.当日自助机专家人次  =  当日自助机专家人次;
        this.当日自费APP普通人次 = 当日自费APP普通人次;
        this.当日自费APP专家人次 =  当日自费APP专家人次;
        this.当日医保APP普通人次 = 当日医保APP普通人次;
        this.当日医保APP专家人次 = 当日医保APP专家人次;
        this.当日窗口普通人次 = 当日窗口普通人次;
        this.当日窗口专家人次 = 当日窗口专家人次;
    }
    // 科室代码	科室名称	班次	当日自助机普通人次	当日自助机专家人次	当日自费APP普通人次	当日自费APP专家人次	当日医保APP普通人次	当日医保APP专家人次	当日窗口普通人次	当日窗口专家人次

};
class C出院复诊预约
{
    constructor(科室代码,科室名称,	班次,	需要出院复诊预约,	出院复诊预约)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.需要出院复诊预约 = 需要出院复诊预约;
        this.出院复诊预约  =  出院复诊预约;


    }
    // 科室代码	科室名称	班次	需要出院复诊预约	出院复诊预约

};



class C可提供号源
{
    constructor(科室代码,科室名称,	班次,就诊总数,预约总数,	普通就诊总数,	预约普通总数,	专家就诊总数,	预约专家总数)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.就诊总数  = 就诊总数;

        this.预约总数 = 预约总数;
        this.普通就诊总数  =  普通就诊总数;
        this.预约普通总数 = 预约普通总数;
        this.专家就诊总数 =  专家就诊总数;
        this.预约专家总数 = 预约专家总数;

    };
    calc(号源总数,实际预约挂号,当日挂号合计)
    {
        this.就诊总数  = 号源总数.挂号总数;
        this.预约总数 = 号源总数.非当日预约总数 + 实际预约挂号.当日预约数;
        this.普通就诊总数  =  号源总数.普通挂号总数;
        this.预约普通总数 = 号源总数.非当日预约普通总数 + 当日挂号合计.当日普通预约数;
        this.专家就诊总数 = 号源总数.专家挂号总数 ;
        this.预约专家总数 = 号源总数.非当日预约专家总数 + 当日挂号合计.当日专家预约数;
    }

    // 科室代码	班次	就诊总数	预约总数	普通就诊总数	预约普通总数	专家就诊总数	预约专家总数

};

class C当日挂号合计
{
    constructor(科室代码,科室名称,	班次,	当日自助机人次,	当日自费APP人次,	当日医保APP人次,	当日窗口人次,	当日普通预约数,	当日专家预约数)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.当日自助机人次 = 当日自助机人次;
        this.当日自费APP人次  =  当日自费APP人次;
        this.当日医保APP人次 = 当日医保APP人次;
        this.当日窗口人次 =  当日窗口人次;
        this.当日普通预约数 = 当日普通预约数;
        this.当日专家预约数 = 当日专家预约数;

    }
    // 科室代码	科室名称	班次	当日自助机人次	当日自费APP人次	当日医保APP人次	当日窗口人次	当日普通预约数	当日专家预约数
    calc(当日预约,当日医生加号)
    {
        this.当日自助机人次 = 当日预约.当日自助机普通人次 +	当日预约.当日自助机专家人次;
        this.当日自费APP人次  =  当日预约.当日自费APP普通人次	 + 当日预约.当日自费APP专家人次;

        this.当日医保APP人次 = 当日预约.当日医保APP普通人次 +	当日预约.当日医保APP专家人次;

        this.当日窗口人次 =  当日预约.当日窗口普通人次 +	当日预约.当日窗口专家人次;

        this.当日普通预约数 = 当日预约.当日自助机普通人次 + 当日预约.当日自费APP普通人次 + 当日预约.当日医保APP普通人次 + 当日医生加号.当日医生预约普通总数;  //当日预约.当日窗口普通人次 +
        this.当日专家预约数 = 当日预约.当日自助机专家人次 + 当日预约.当日自费APP专家人次 + 当日预约.当日医保APP专家人次 + 当日医生加号.当日医生预约专家总数;
    }
}

class C实际预约挂号
{
    constructor(科室代码,科室名称,班次,窗口预约,电话预约,网络预约,其他非当日预约,当日医生站,	当日自助机,当日APP,当日预约数,初诊预约挂号数,其他预约挂号数,当日实际普通,当日实际专家)
    {
        this.科室代码 = 科室代码;
        this.科室名称  = 科室名称;
        this.班次= 班次;
        this.窗口预约 = 窗口预约;
        this.电话预约  =  电话预约;
        this.网络预约 = 网络预约;
        this.其他非当日预约 =  其他非当日预约;
        this.当日医生站 = 当日医生站;
        this.当日自助机 = 当日自助机;
        this.当日APP = 当日APP;
        this.当日预约数 = 当日预约数;
        this.初诊预约挂号数 = 初诊预约挂号数;
        this.其他预约挂号数 = 其他预约挂号数;
        this.当日实际普通 = 当日实际普通;
        this.当日实际专家 = 当日实际专家;
    }
    // 科室代码	科室名称	班次	窗口预约	电话预约	网络预约	其他非当日预约[16]	当日医生站[4]	当日自助机[5]	当日APP[6]	当日预约数[3]	初诊预约挂号数[10]	其他预约挂号数[3+16]	当日实际普通	当日实际专家
    calc(非当日预约,当日医生加号,当日挂号合计)
    {
        this.窗口预约 =非当日预约.窗口预约;

        this.电话预约 = 非当日预约.电话预约;
        this.网络预约 = 非当日预约.网络预约;
        this.其他非当日预约 =   非当日预约.其他预约;
        this.当日医生站 = 当日医生加号.当日医生预约总数;
        this.当日自助机 = 当日挂号合计.当日自助机人次;//当日预约.当日自助机普通人次 +	当日预约.当日自助机专家人次;
        this.当日APP = 当日挂号合计.当日医保APP人次 + 当日挂号合计.当日自费APP人次;
        this.当日预约数 = this.当日APP + this.当日自助机 + this.当日医生站;
        this.初诊预约挂号数 = this.窗口预约 + this.电话预约 + this.网络预约 + this.当日自助机 + this.当日APP;
        this.当日实际普通 = 当日挂号合计.当日普通预约数 + 非当日预约.普通号;
        this.其他预约挂号数 = this.其他非当日预约 + this.当日预约数;
        this.当日实际专家 = 当日挂号合计.当日专家预约数 + 非当日预约.专家号;
    }
};

class C挂号统计项
{
    constructor()
    {
        this.当日可提供号源数量_合计_就诊总数 = 0;
        this.当日可提供号源数量_合计_预约总数 = 0;

        this.当日可提供号源数量_普通号_就诊总数 = 0;
        this.当日可提供号源数量_普通号_预约总数 = 0;

        this.当日可提供号源数量_专家号_就诊总数 = 0;
        this.当日可提供号源数量_专家号_预约总数 = 0;

        this.当日实际就诊人次_合计 = 0;
        this.当日实际就诊人次_汇总 = 0;
        this.当日实际就诊人次_初诊 = 0;
        this.当日实际就诊人次_复诊 = 0;
        this.当日实际就诊人次_出院复诊 = 0;




        this.当日实际预约就诊挂号数量_合计 = 0;
        this.当日实际预约就诊挂号数量_按号源_普通号 = 0;
        this.当日实际预约就诊挂号数量_按号源_专家号 = 0;

        this.当日实际预约就诊挂号数量_按预约方式_窗口预约 = 0;
        this.当日实际预约就诊挂号数量_按预约方式_电话预约 = 0;
        this.当日实际预约就诊挂号数量_按预约方式_网络预约 = 0;
        this.当日实际预约就诊挂号数量_按预约方式_其他预约 = 0;

        this.当日实际预约就诊挂号数量_按就诊类别_初诊预约 = 0;
        this.当日实际预约就诊挂号数量_按就诊类别_复诊预约 = 0;
        this.当日实际预约就诊挂号数量_按就诊类别_出院复诊预约 = 0;


        this.出院复诊预约调整 = 0;


        this.预约失约号数 = 0;
        this.预约比例= 0.0;
        this.复诊预约率 = 0.0;
        this.出院复诊率=0.0;
        this.预约失约率=0.0;

    };
    calc(可提供号源,实际预约挂号,出院复诊预约,号源总数,当日挂号合计)
    {
        this.当日可提供号源数量_普通号_预约总数 = 可提供号源.预约普通总数;
        this.当日可提供号源数量_普通号_就诊总数 = math.max(可提供号源.普通就诊总数,this.当日可提供号源数量_普通号_预约总数);
        this.当日可提供号源数量_专家号_预约总数 = 可提供号源.预约专家总数;
        this.当日可提供号源数量_专家号_就诊总数 = math.max(可提供号源.专家就诊总数,this.当日可提供号源数量_专家号_预约总数);
        this.当日可提供号源数量_合计_就诊总数 = this.当日可提供号源数量_普通号_就诊总数 + this.当日可提供号源数量_专家号_就诊总数;
        this.当日可提供号源数量_合计_预约总数 = this.当日可提供号源数量_普通号_预约总数 + this.当日可提供号源数量_专家号_预约总数;

        this.当日实际预约就诊挂号数量_按预约方式_窗口预约 = 实际预约挂号.窗口预约;
        this.当日实际预约就诊挂号数量_按预约方式_电话预约 = 实际预约挂号.电话预约;
        this.当日实际预约就诊挂号数量_按预约方式_网络预约 = 实际预约挂号.网络预约;
        this.当日实际预约就诊挂号数量_按预约方式_其他预约 = 实际预约挂号.其他预约挂号数;

        this.当日实际预约就诊挂号数量_合计 = this.当日实际预约就诊挂号数量_按预约方式_窗口预约 + this.当日实际预约就诊挂号数量_按预约方式_电话预约
            + this.当日实际预约就诊挂号数量_按预约方式_网络预约 + this.当日实际预约就诊挂号数量_按预约方式_其他预约;


        this.当日实际预约就诊挂号数量_按就诊类别_初诊预约 = 实际预约挂号.初诊预约挂号数;
        this.当日实际预约就诊挂号数量_按就诊类别_复诊预约 = this.当日实际预约就诊挂号数量_合计 - this.当日实际预约就诊挂号数量_按就诊类别_初诊预约;

        //=IF('5.出院复诊预约'!E3>M5,M5,'5.出院复诊预约'!E3)

        this.当日实际预约就诊挂号数量_按就诊类别_出院复诊预约 = math.min(出院复诊预约.出院复诊预约,this.当日实际就诊人次_出院复诊);

        this.当日实际预约就诊挂号数量_按号源_普通号 = 实际预约挂号.当日实际普通;
        this.当日实际预约就诊挂号数量_按号源_专家号 = this.当日实际预约就诊挂号数量_合计 - 实际预约挂号.当日实际普通;


        this.当日实际就诊人次_初诊 = 实际预约挂号.初诊预约挂号数 + 当日挂号合计.当日窗口人次;
        this.当日实际就诊人次_汇总 = math.max(号源总数.挂号总数,this.当日实际预约就诊挂号数量_合计);

        this.当日实际就诊人次_复诊 = math.max(this.当日实际就诊人次_汇总 - this.当日实际就诊人次_初诊);
        this.当日实际就诊人次_合计 = this.当日实际就诊人次_初诊 + this.当日实际就诊人次_复诊;
        this.当日实际就诊人次_出院复诊 = math.min(出院复诊预约.需要出院复诊预约,this.当日实际就诊人次_复诊 );


        this.出院复诊预约调整 = 0;


        this.预约失约号数 = 号源总数.非当日失约数;
        this.预约比例= this.当日实际预约就诊挂号数量_合计/this.当日实际就诊人次_汇总;
        this.复诊预约率 = this.当日实际就诊人次_复诊/this.当日实际预约就诊挂号数量_按就诊类别_复诊预约;
        // =IF(M5=0,0,W5/M5)
        if (this.当日实际就诊人次_出院复诊 == 0)
        {this.出院复诊率=0.0;}
        else {this.出院复诊率=this.当日实际预约就诊挂号数量_按就诊类别_出院复诊预约/this.当日实际就诊人次_出院复诊;}




        //if (号源总数.非当日预约总数 == 0)
        if (this.预约失约率 == 0)
        {
            this.预约失约率=0.0;
        }
        else
        {
            this.预约失约率=this.预约失约号数/this.预约失约率;
        }
    }

};
class C预约挂号统计表
{
    constructor()
    {
        this.科室列表 = new Array();
        this.全院汇总 = new C挂号统计项();
        this.内科汇总 = new C挂号统计项();

        this.全院预约率=0.0;
        this.复诊预约率=0.0;
        this.出院复诊预约率=0.0;
        this.全院失约率=0.0;

    }
    cal() {
`
    定义列表
    计算列表中的值
    汇总列表
`
        let 非当日预约 = new C非当日预约(101,	"内科",	1,	0,	273	,0,	67,	0,	206   );
        let 号源总数 = new C号源总数(101,	科室字典[101],1,	2604,	1011,	1593,	304,	0,	304,	31    );
        let 当日医生加号 = new C当日医生加号(101,科室字典[101],	"上午",	1027,	1011,	16 );
        let 当日预约 = new C当日预约(101,	"内科",	1,0,764	,0,	199	,0,	340	,0,	1   );
        let 出院复诊预约 = new C出院复诊预约(101,	"内科",	1,0,0    );

        let 非当日预约表 = new Array();
        let 号源总数表 = new Array();
        let 当日医生加号表 = new Array();
        let 当日预约表 = new Array();
        let 出院复诊预约表 = new Array();


        let 当日挂号合计表 = new Array();
        let 实际预约挂号表 = new Array();
        let 可提供号源表 = new Array();
        let 计算过程表 = new Array();



        let 当日挂号合计 = new C当日挂号合计();
        当日挂号合计.calc(当日预约,当日医生加号);

        let 实际预约挂号 = new C实际预约挂号();
        实际预约挂号.calc(非当日预约,当日医生加号,当日挂号合计);
        let 可提供号源 = new C可提供号源();
        可提供号源.calc(号源总数,实际预约挂号,当日挂号合计);
        let 计算过程 = new C挂号统计项();
        计算过程.calc(可提供号源,实际预约挂号,出院复诊预约,号源总数,当日挂号合计);

        //
        for(var i= 0, l = 排班表.length; i< l; i++)
        {
            非当日预约表.push(非当日预约);
            号源总数表.push(号源总数);
            当日医生加号表.push(当日医生加号);
            当日预约表.push(当日预约);
            出院复诊预约表.push(出院复诊预约);

            当日挂号合计表.push(new C当日挂号合计());
            实际预约挂号表.push(new C实际预约挂号());
            可提供号源表.push(new C可提供号源());
            计算过程表.push(new C挂号统计项());

            console.log(排班表[i]);
        }
        for(var i= 0, l = 排班表.length; i< l; i++) {

            当日挂号合计表[i].calc(当日预约表[i],当日医生加号表[i]);

            //let 实际预约挂号 = new C实际预约挂号();
            实际预约挂号表[i].calc(非当日预约表[i],当日医生加号表[i],当日挂号合计表[i]);
            //let 可提供号源 = new C可提供号源();
            可提供号源表[i].calc(号源总数表[i],实际预约挂号表[i],当日挂号合计表[i]);
            //let 计算过程 = new C挂号统计项();
            计算过程表[i].calc(可提供号源表[i],实际预约挂号表[i],出院复诊预约表[i],号源总数表[i],当日挂号合计表[i]);
        };

        // for(var a in 科室字典)
        // {
        //     console.log('[' + a +',"' + 科室字典[a] + '",1],');
        //     console.log('[' + a +',"' + 科室字典[a] + '",2],');
        // }
        // 科室字典.forEach(function(item,index){
        //
        //     console.log(item);
        // },科室字典);

        // 排班表.forEach(function(item,index){
        //     console.log(item);
        // });

        var str_json = JSON.stringify(计算过程表);

        fs.writeFile('计算过程.json', str_json, 'utf8', function(){
            // 保存完成后的回调函数
            console.log("保存完成");
        });

        save(计算过程表);
    }
}




function calculate()
{
    let 非当日预约 = new C非当日预约();
    let 实际预约挂号 = new C实际预约挂号();
    let 当日医生加号 = new C当日医生加号();
    let 当日预约 = new C当日预约();
    let 当日挂号合计 = new C当日挂号合计();
    let 可提供号源 = new C可提供号源();
    let 号源总数 = new C号源总数();
    let 计算过程CHECK = new C挂号统计项();
    //let 计算汇总 = new C挂号统计表();
    let 出院复诊预约 = new C出院复诊预约();

    当日挂号合计.当日自助机人次 = 当日预约.当日自助机普通人次 +	当日预约.当日自助机专家人次;
    当日挂号合计.当日自费APP人次  =  当日预约.当日自费APP普通人次	 + 当日预约.当日自费APP专家人次;

    当日挂号合计.当日医保APP人次 = 当日预约.当日医保APP普通人次 +	当日预约.当日医保APP专家人次;

    当日挂号合计.当日窗口人次 =  当日预约.当日窗口普通人次 +	当日预约.当日窗口专家人次;

    当日挂号合计.当日普通预约数 = 当日预约.当日自助机普通人次 + 当日预约.当日自费APP普通人次 + 当日预约.当日医保APP普通人次 + 当日医生加号.当日医生预约普通总数;  //当日预约.当日窗口普通人次 +
    当日挂号合计.当日专家预约数 = 当日预约.当日自助机专家人次 + 当日预约.当日自费APP专家人次 + 当日预约.当日医保APP专家人次 + 当日医生加号.当日医生预约专家总数;



    实际预约挂号.窗口预约 =非当日预约.窗口预约;

    实际预约挂号.电话预约 = 非当日预约.电话预约;
    实际预约挂号.网络预约 = 非当日预约.网络预约;
    实际预约挂号.其他非当日预约 =   非当日预约.其他预约;
    实际预约挂号.当日医生站 = 当日医生加号.当日医生预约总数;
    实际预约挂号.当日自助机 = 当日挂号合计.当日自助机人次;//当日预约.当日自助机普通人次 +	当日预约.当日自助机专家人次;
    实际预约挂号.当日APP = 当日挂号合计.当日医保APP人次 + 当日挂号合计.当日自费APP人次;
    实际预约挂号.当日预约数 = 实际预约挂号.当日APP + 实际预约挂号.当日自助机 + 实际预约挂号.当日医生站;
    实际预约挂号.初诊预约挂号数 = 实际预约挂号.窗口预约 + 实际预约挂号.电话预约 + 实际预约挂号.网络预约 + 实际预约挂号.当日自助机 + 实际预约挂号.当日APP;
    实际预约挂号.当日实际普通 = 当日挂号合计.当日普通预约数 + 非当日预约.普通号;
    实际预约挂号.其他预约挂号数 = 实际预约挂号.其他非当日预约 + 实际预约挂号.当日预约数;
    实际预约挂号.当日实际专家 = 当日挂号合计.当日专家预约数 + 非当日预约.专家号;

    可提供号源.就诊总数  = 号源总数.挂号总数;
    可提供号源.预约总数 = 号源总数.非当日预约总数 + 实际预约挂号.当日预约数;
    可提供号源.普通就诊总数  =  号源总数.普通挂号总数;
    可提供号源.预约普通总数 = 号源总数.非当日预约普通总数 + 当日挂号合计.当日普通预约数;
    可提供号源.专家就诊总数 = 号源总数.专家挂号总数 ;
    可提供号源.预约专家总数 = 号源总数.非当日预约专家总数 + 当日挂号合计.当日专家预约数;


    计算过程CHECK.当日可提供号源数量_普通号_预约总数 = 可提供号源.预约普通总数;
    计算过程CHECK.当日可提供号源数量_普通号_就诊总数 = max(可提供号源.普通就诊总数,计算过程CHECK.当日可提供号源数量_普通号_预约总数);
    计算过程CHECK.当日可提供号源数量_专家号_预约总数 = 可提供号源.预约专家总数;
    计算过程CHECK.当日可提供号源数量_专家号_就诊总数 = max(可提供号源.专家就诊总数,计算过程CHECK.当日可提供号源数量_专家号_预约总数);
    计算过程CHECK.当日可提供号源数量_合计_就诊总数 = 计算过程CHECK.当日可提供号源数量_普通号_就诊总数 + 当日可提供号源数量_专家号_就诊总数;
    计算过程CHECK.当日可提供号源数量_合计_预约总数 = 当日可提供号源数量_普通号_预约总数 + 当日可提供号源数量_专家号_预约总数;

    计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_窗口预约 = 实际预约挂号.窗口预约;
    计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_电话预约 = 实际预约挂号.电话预约;
    计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_网络预约 = 实际预约挂号.网络预约;
    计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_其他预约 = 实际预约挂号.其他预约挂号数;

    计算过程CHECK.当日实际预约就诊挂号数量_合计 = 计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_窗口预约 + 计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_电话预约
    + 计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_网络预约 + 计算过程CHECK.当日实际预约就诊挂号数量_按预约方式_其他预约;


    计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_初诊预约 = 实际预约挂号.初诊预约挂号数;
    计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_复诊预约 = 计算过程CHECK.当日实际预约就诊挂号数量_合计 - 计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_初诊预约;

    //=IF('5.出院复诊预约'!E3>M5,M5,'5.出院复诊预约'!E3)

    计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_出院复诊预约 = min(出院复诊预约.出院复诊预约,计算过程CHECK.当日实际就诊人次_出院复诊);

    // if( 出院复诊预约.出院复诊预约 > 计算过程CHECK.当日实际就诊人次_出院复诊)
    // {
    //     计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_出院复诊预约 =
    // }
    // else
    // {
    //     计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_出院复诊预约 =出院复诊预约.出院复诊预约;
    // }
    计算过程CHECK.当日实际预约就诊挂号数量_按号源_普通号 = 实际预约挂号.当日实际普通;
    计算过程CHECK.当日实际预约就诊挂号数量_按号源_专家号 = 计算过程CHECK.当日实际预约就诊挂号数量_合计 - 实际预约挂号.当日实际普通;


    计算过程CHECK.当日实际就诊人次_初诊 = 实际预约挂号.初诊预约挂号数 + 当日挂号合计.当日窗口人次;
    计算过程CHECK.当日实际就诊人次_汇总 = max(号源总数.挂号总数,计算过程CHECK.当日实际预约就诊挂号数量_合计);

    计算过程CHECK.当日实际就诊人次_复诊 = max(计算过程CHECK.当日实际就诊人次_汇总 - 计算过程CHECK.当日实际就诊人次_初诊);
    计算过程CHECK.当日实际就诊人次_合计 = 计算过程CHECK.当日实际就诊人次_初诊 + 计算过程CHECK.当日实际就诊人次_复诊;
    计算过程CHECK.当日实际就诊人次_出院复诊 = min(出院复诊预约.需要出院复诊预约,当日实际就诊人次_复诊 );


    计算过程CHECK.出院复诊预约调整 = 0;


    计算过程CHECK.预约失约号数 = 号源总数.非当日失约数;
    计算过程CHECK.预约比例= 计算过程CHECK.当日实际预约就诊挂号数量_合计/计算过程CHECK.当日实际就诊人次_汇总;
    计算过程CHECK.复诊预约率 = 计算过程CHECK.当日实际就诊人次_复诊/计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_复诊预约;
    // =IF(M5=0,0,W5/M5)
    if (计算过程CHECK.当日实际就诊人次_出院复诊 == 0)
    {计算过程CHECK.出院复诊率=0.0;}
    else {计算过程CHECK.出院复诊率=计算过程CHECK.当日实际预约就诊挂号数量_按就诊类别_出院复诊预约/计算过程CHECK.当日实际就诊人次_出院复诊;}




    //if (号源总数.非当日预约总数 == 0)
    if (计算过程CHECK.预约失约率 == 0)
    {
        计算过程CHECK.预约失约率=0.0;
    }
    else
    {
        计算过程CHECK.预约失约率=计算过程CHECK.预约失约号数/计算过程CHECK.预约失约率;
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




};

// 班次	挂号总数	普通挂号总数	专家挂号总数	非当日预约总数	非当日预约普通总数 	非当日预约专家总数	 非当日失约数
//
// 科室代码	科室名称	班次	普通号	专家号	窗口预约	电话预约	网络预约	其他预约
var args1 = {minRQ: "2015-11-11",maxRQ:"2017-12-11"};
soaptest(args1);

// 预约挂号统计表 = new C预约挂号统计表();
// 预约挂号统计表.cal();
// dept = new Dept("101","内科");
// fdr = new 非当日预约("101","内科","1",0,0,0,0,0,0);
// console.log(fdr);